version: '3.8'

services:
  # Aplicação principal
  pdf-pipeline:
    build: .
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=pdf_pipeline
      - POSTGRES_USER=pipeline_user
      - POSTGRES_PASSWORD=pipeline_pass
    env_file:
      - docker/development.env
    depends_on:
      - redis
      - postgres
    volumes:
      - ./uploads:/app/uploads
      - ./processing:/app/processing
      - ./embeddings:/app/embeddings
      - ./ml_analysis:/app/ml_analysis
    restart: unless-stopped
    networks:
      - pipeline-network

  # Instância adicional para load balancing
  pdf-pipeline-2:
    build: .
    ports:
      - "8001:8000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=pdf_pipeline
      - POSTGRES_USER=pipeline_user
      - POSTGRES_PASSWORD=pipeline_pass
    env_file:
      - docker/development.env
    depends_on:
      - redis
      - postgres
    volumes:
      - ./uploads:/app/uploads
      - ./processing:/app/processing
      - ./embeddings:/app/embeddings
      - ./ml_analysis:/app/ml_analysis
    restart: unless-stopped
    networks:
      - pipeline-network

  # Redis para cache e filas
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --protected-mode no --bind 0.0.0.0
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pipeline-network

  # PostgreSQL para metadados
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: pdf_pipeline
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - pipeline-network

  # Nginx para load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - pdf-pipeline
      - pdf-pipeline-2
    restart: unless-stopped
    networks:
      - pipeline-network

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - pipeline-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - pipeline-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  pipeline-network:
    driver: bridge 